openapi: 3.0.0
info:
  title: service-university-task
  description: Service for API of university task management.
  version: 1.0.0
servers:
  - url: https://kalibatiene-app-backend.herokuapp.com/v1/
paths:

###################
###################
##   NOTIFICATION API    ##
###################
###################

  /notification:
    post:
      security:
        - bearerAuth: []
      summary: Creates a new notif entry on the mongo database.
      operationId: createNotificationOperation
      tags:
        - Notification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
      responses:
        '200':
          description: The created notif JSON body indicating successfully made request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '400':
          description: The response is bad because request are malformed or openapi express validations fails.
          content:
            text/plain:
                schema:
                  type: string
                  example: Something is wrong, check your data before sending us a love letter.
                  description: The error message.
        '401':
          description: The user are not authorized to perform operation.
          content:
            text/plain:
                schema:
                  type: string
                  example: Get your dirty hands off our application, hacker!
                  description: The error message.
        '408':
          description: The request is not malformed but the internal server sent timeout.
          content:
            text/plain:
                schema:
                  type: string
                  example: The request timeouted...
                  description: The error message.
        '500':
          description: Internal server error, probably not a user's fault.
          content:
            text/plain:
                schema:
                  type: string
                  example: We are having crisis, it's not your fault...
                  description: The error message.

    get:
      security:
        - bearerAuth: []
      summary: Fetches all services by filtering them with one or more query entries.
      operationId: fetchNotificationOperation
      tags:
        - Notification
      parameters:
        - in: query
          name: userId
          required: false
          description: The internal mongo id value for the user's entity.
          schema:
            type: string
            minLength: 24
      responses:
        '200':
          description: The fetched service entries by any of query parameters choosen. Array of entries and empty array can be returned to indicate empty list. Returning array in JSON body to indicate successfully made request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        '400':
          description: The response is bad because request are malformed or openapi express validations fails.
          content:
            text/plain:
                schema:
                  type: string
                  example: Something is wrong, check your data before sending us a love letter.
                  description: The error message.
        '401':
          description: The user are not authorized to perform operation.
          content:
            text/plain:
                schema:
                  type: string
                  example: Get your dirty hands off our application, hacker!
                  description: The error message.
        '408':
          description: The request is not malformed but the internal server sent timeout.
          content:
            text/plain:
                schema:
                  type: string
                  example: The request timeouted...
                  description: The error message.
        '500':
          description: Internal server error, probably not a user's fault.
          content:
            text/plain:
                schema:
                  type: string
                  example: We are having crisis, it's not your fault...
                  description: The error message.
          
  /notification/{notificationId}:
    get:
      security:
        - bearerAuth: []
      summary: Gathers single notif entry by passing internal mongo id of the notif.
      operationId: getNotificationOperation
      tags:
        - Notification
      parameters:
        - in: path
          name: notificationId
          required: true
          description: The internal mongo id value for the Notification's entity.
          schema:
            type: string
            minLength: 24
      responses:
        '200':
          description: The requested Notification entity is found, returning Notification JSON body to indicate successfully made request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '400':
          description: The response is bad because request are malformed or openapi express validations fails.
          content:
            text/plain:
                schema:
                  type: string
                  example: Something is wrong, check your data before sending us a love letter.
                  description: The error message.
        '401':
          description: The user are not authorized to perform operation.
          content:
            text/plain:
                schema:
                  type: string
                  example: Get your dirty hands off our application, hacker!
                  description: The error message.
        '404':
          description: The resource is not found by given mongo id value.
          content:
            text/plain:
                schema:
                  type: string
                  example: Requested resource does not exist...
                  description: The error message.
        '408':
          description: The request is not malformed but the internal server sent timeout.
          content:
            text/plain:
                schema:
                  type: string
                  example: The request timeouted...
                  description: The error message.
        '500':
          description: Internal server error, probably not a user's fault.
          content:
            text/plain:
                schema:
                  type: string
                  example: We are having crisis, it's not your fault...
                  description: The error message.
          
    patch:
      security:
        - bearerAuth: []
      summary: Updates single Notification entry by passing mongo id of the Notification and specific field to update.
      operationId: updateNotificationOperation
      tags:
        - Notification
      parameters: 
        - in: path
          name: notificationId
          required: true
          description: The internal mongo id value for the Notification's entity.
          schema:
            type: string
            minLength: 24
      requestBody:
        required: true
        description: The data body of the Notification to be updated on mongo database.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
      responses:
        '200':
          description: The updated task JSON body indicating successfully made request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '400':
          description: The response is bad because request are malformed or openapi express validations fails.
          content:
            text/plain:
                schema:
                  type: string
                  example: Something is wrong, check your data before sending us a love letter.
                  description: The error message.
        '401':
          description: The user are not authorized to perform operation.
          content:
            text/plain:
                schema:
                  type: string
                  example: Get your dirty hands off our application, hacker!
                  description: The error message.
        '404':
          description: The resource requested for update operation is not found by given mongo id value.
          content:
            text/plain:
                schema:
                  type: string
                  example: Requested resource does not exist...
                  description: The error message.
        '408':
          description: The request is not malformed but the internal server sent timeout.
          content:
            text/plain:
                schema:
                  type: string
                  example: The request timeouted...
                  description: The error message.
        '500':
          description: Internal server error, probably not a user's fault.
          content:
            text/plain:
                schema:
                  type: string
                  example: We are having crisis, it's not your fault...
                  description: The error message.
          
    delete:
      security:
        - bearerAuth: []
      summary: Removes single Notification entry by passing mongo id of the Notification entity.
      operationId: removeNotificationOperation
      tags:
        - Notification
      parameters:
        - in: path
          name: notificationId
          required: true
          description: The internal mongo id value for the Notification's entity.
          schema:
            type: string
            minLength: 24
      responses:
        '200':
          description: Successful response code thrown in case of deletion operation succeed.
          content:
            text/plain:
                schema:
                  type: string
                  example: OK.
                  description: The error message.
        '400':
          description: The response is bad because request are malformed or openapi express validations fails.
          content:
            text/plain:
                schema:
                  type: string
                  example: Something is wrong, check your data before sending us a love letter.
                  description: The error message.
        '401':
          description: The user are not authorized to perform operation.
          content:
            text/plain:
                schema:
                  type: string
                  example: Get your dirty hands off our application, hacker!
                  description: The error message.
        '404':
          description: The resource requested for update operation is not found by given mongo id value.
          content:
            text/plain:
                schema:
                  type: string
                  example: Requested resource does not exist...
                  description: The error message.
        '408':
          description: The request is not malformed but the internal server sent timeout.
          content:
            text/plain:
                schema:
                  type: string
                  example: The request timeouted...
                  description: The error message.
        '500':
          description: Internal server error, probably not a user's fault.
          content:
            text/plain:
                schema:
                  type: string
                  example: We are having crisis, it's not your fault...
                  description: The error message.

###################
###################
##   SERVICE API    ##
###################
###################

  /service:
    post:
      security:
        - bearerAuth: []
      summary: Creates a new service entry on the mongo database.
      operationId: createServiceOperation
      tags:
        - Service
      requestBody:
        required: true
        description: > 
          The data body of the service to be created on mongo database. Required fields are those:
           - `title`
           - `type`
           - `userId`
          > Other data:
           - `unit`
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '200':
          description: The created task JSON body indicating successfully made request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          description: The response is bad because request are malformed or openapi express validations fails.
          content:
            text/plain:
                schema:
                  type: string
                  example: Something is wrong, check your data before sending us a love letter.
                  description: The error message.
        '401':
          description: The user are not authorized to perform operation.
          content:
            text/plain:
                schema:
                  type: string
                  example: Get your dirty hands off our application, hacker!
                  description: The error message.
        '408':
          description: The request is not malformed but the internal server sent timeout.
          content:
            text/plain:
                schema:
                  type: string
                  example: The request timeouted...
                  description: The error message.
        '500':
          description: Internal server error, probably not a user's fault.
          content:
            text/plain:
                schema:
                  type: string
                  example: We are having crisis, it's not your fault...
                  description: The error message.

    get:
      security:
        - bearerAuth: []
      summary: Fetches all services by filtering them with one or more query entries.
      operationId: fetchServiceOperation
      tags:
        - Service
      parameters:
        - in: query
          name: userId
          required: false
          description: The internal mongo id value for the user's entity.
          schema:
            type: string
            minLength: 24
        - in: query
          name: type
          required: false
          description: The type of the service.
          schema:
            type: string
            minLength: 24
      responses:
        '200':
          description: The fetched service entries by any of query parameters choosen. Array of entries and empty array can be returned to indicate empty list. Returning array in JSON body to indicate successfully made request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        '400':
          description: The response is bad because request are malformed or openapi express validations fails.
          content:
            text/plain:
                schema:
                  type: string
                  example: Something is wrong, check your data before sending us a love letter.
                  description: The error message.
        '401':
          description: The user are not authorized to perform operation.
          content:
            text/plain:
                schema:
                  type: string
                  example: Get your dirty hands off our application, hacker!
                  description: The error message.
        '408':
          description: The request is not malformed but the internal server sent timeout.
          content:
            text/plain:
                schema:
                  type: string
                  example: The request timeouted...
                  description: The error message.
        '500':
          description: Internal server error, probably not a user's fault.
          content:
            text/plain:
                schema:
                  type: string
                  example: We are having crisis, it's not your fault...
                  description: The error message.
          
  /service/{serviceId}:
    get:
      security:
        - bearerAuth: []
      summary: Gathers single service entry by passing internal mongo id of the service.
      operationId: getServiceOperation
      tags:
        - Service
      parameters:
        - in: path
          name: serviceId
          required: true
          description: The internal mongo id value for the service's entity.
          schema:
            type: string
            minLength: 24
      responses:
        '200':
          description: The requested service entity is found, returning service JSON body to indicate successfully made request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          description: The response is bad because request are malformed or openapi express validations fails.
          content:
            text/plain:
                schema:
                  type: string
                  example: Something is wrong, check your data before sending us a love letter.
                  description: The error message.
        '401':
          description: The user are not authorized to perform operation.
          content:
            text/plain:
                schema:
                  type: string
                  example: Get your dirty hands off our application, hacker!
                  description: The error message.
        '404':
          description: The resource is not found by given mongo id value.
          content:
            text/plain:
                schema:
                  type: string
                  example: Requested resource does not exist...
                  description: The error message.
        '408':
          description: The request is not malformed but the internal server sent timeout.
          content:
            text/plain:
                schema:
                  type: string
                  example: The request timeouted...
                  description: The error message.
        '500':
          description: Internal server error, probably not a user's fault.
          content:
            text/plain:
                schema:
                  type: string
                  example: We are having crisis, it's not your fault...
                  description: The error message.
          
    patch:
      security:
        - bearerAuth: []
      summary: Updates single service entry by passing mongo id of the service and specific field to update.
      operationId: updateServiceOperation
      tags:
        - Service
      parameters: 
        - in: path
          name: serviceId
          required: true
          description: The internal mongo id value for the service's entity.
          schema:
            type: string
            minLength: 24
      requestBody:
        required: true
        description: The data body of the service to be updated on mongo database.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '200':
          description: The updated task JSON body indicating successfully made request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          description: The response is bad because request are malformed or openapi express validations fails.
          content:
            text/plain:
                schema:
                  type: string
                  example: Something is wrong, check your data before sending us a love letter.
                  description: The error message.
        '401':
          description: The user are not authorized to perform operation.
          content:
            text/plain:
                schema:
                  type: string
                  example: Get your dirty hands off our application, hacker!
                  description: The error message.
        '404':
          description: The resource requested for update operation is not found by given mongo id value.
          content:
            text/plain:
                schema:
                  type: string
                  example: Requested resource does not exist...
                  description: The error message.
        '408':
          description: The request is not malformed but the internal server sent timeout.
          content:
            text/plain:
                schema:
                  type: string
                  example: The request timeouted...
                  description: The error message.
        '500':
          description: Internal server error, probably not a user's fault.
          content:
            text/plain:
                schema:
                  type: string
                  example: We are having crisis, it's not your fault...
                  description: The error message.
          
    delete:
      security:
        - bearerAuth: []
      summary: Removes single service entry by passing mongo id of the service entity.
      operationId: removeServiceOperation
      tags:
        - Service
      parameters:
        - in: path
          name: serviceId
          required: true
          description: The internal mongo id value for the service's entity.
          schema:
            type: string
            minLength: 24
      responses:
        '200':
          description: Successful response code thrown in case of deletion operation succeed.
          content:
            text/plain:
                schema:
                  type: string
                  example: OK.
                  description: The error message.
        '400':
          description: The response is bad because request are malformed or openapi express validations fails.
          content:
            text/plain:
                schema:
                  type: string
                  example: Something is wrong, check your data before sending us a love letter.
                  description: The error message.
        '401':
          description: The user are not authorized to perform operation.
          content:
            text/plain:
                schema:
                  type: string
                  example: Get your dirty hands off our application, hacker!
                  description: The error message.
        '404':
          description: The resource requested for update operation is not found by given mongo id value.
          content:
            text/plain:
                schema:
                  type: string
                  example: Requested resource does not exist...
                  description: The error message.
        '408':
          description: The request is not malformed but the internal server sent timeout.
          content:
            text/plain:
                schema:
                  type: string
                  example: The request timeouted...
                  description: The error message.
        '500':
          description: Internal server error, probably not a user's fault.
          content:
            text/plain:
                schema:
                  type: string
                  example: We are having crisis, it's not your fault...
                  description: The error message.
          
#########################
#########################
##   READING API    ##
#########################
#########################

  /reading:
    post:
      security:
        - bearerAuth: []
      summary: Creates a new reading entry on the mongo database.
      operationId: createReadingOperation
      tags:
        - Reading
      requestBody:
        required: true
        description: >
          The data body of the reading to be created on mongo database. Required fields are those:
           - `date`
           - `serviceId`
          > Not required:
           - `value`
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reading'
      responses:
        '200':
          description: The created reading JSON body indicating successfully made request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reading'
        '400':
          description: The response is bad because request are malformed or openapi express validations fails.
          content:
            text/plain:
                schema:
                  type: string
                  example: Something is wrong, check your data before sending us a love letter.
                  description: The error message.
        '401':
          description: The user are not authorized as administrator to perform operation.
          content:
            text/plain:
                schema:
                  type: string
                  example: Get your dirty hands off our application, hacker!
                  description: The error message.
        '408':
          description: The request is not malformed but the internal server sent timeout.
          content:
            text/plain:
                schema:
                  type: string
                  example: The request timeouted...
                  description: The error message.
        '500':
          description: Internal server error, probably not a user's fault.
          content:
            text/plain:
                schema:
                  type: string
                  example: We are having crisis, it's not your fault...
                  description: The error message.
          
    get:
      security:
        - bearerAuth: []
      summary: Fetches all readings existing in the database.
      operationId: fetchReadingOperation
      tags:
        - Reading
      parameters:
        - in: query
          name: serviceId
          required: true
          description: The internal mongo id value for the service's entity. To filter reading entries for the certain service.
          schema:
            minLength: 24
            type: string
        - in: query
          name: date
          required: true
          description: The date for the readings to be selected.
          schema:
            type: string
            format: date-time
        - in: query
          name: period
          required: true
          description: The period for the readings to be displayed DAY, QUARTER, MONTH.
          schema:
            type: string
            enum: [DAY, QUARTER, MONTH]
      responses:
        '200':
          description: The fetched reading entries.
          content:
            application/json:
              schema:
                type: object
                properties:
                  unit:
                    type: string
                    description: The units for reading.
                  readings:
                    type: array
                    items:
                      $ref: '#/components/schemas/Reading'
        '400':
          description: The response is bad because request are malformed or openapi express validations fails.
          content:
            text/plain:
                schema:
                  type: string
                  example: Something is wrong, check your data before sending us a love letter.
                  description: The error message.
        '401':
          description: The user are not authorized to perform operation.
          content:
            text/plain:
                schema:
                  type: string
                  example: Get your dirty hands off our application, hacker!
                  description: The error message.
        '408':
          description: The request is not malformed but the internal server sent timeout.
          content:
            text/plain:
                schema:
                  type: string
                  example: The request timeouted...
                  description: The error message.
        '500':
          description: Internal server error, probably not a user's fault.
          content:
            text/plain:
                schema:
                  type: string
                  example: We are having crisis, it's not your fault...
                  description: The error message.
          
  /reading/{readingId}:
    delete:
      security:
        - bearerAuth: []
      summary: Removes reading's entry from the mongo DB.
      operationId: removeReadingOperation
      tags:
        - Reading
      parameters:
        - in: path
          name: readingId
          required: true
          description: The internal mongo id value for the reading's entity.
          schema:
            type: string
            minLength: 24
      responses:
        '200':
          description: Successful response code thrown in case of deletion operation succeed.
          content:
            text/plain:
                schema:
                  type: string
                  example: OK.
                  description: The error message.
        '400':
          description: The response is bad because request are malformed or openapi express validations fails.
          content:
            text/plain:
                schema:
                  type: string
                  example: Something is wrong, check your data before sending us a love letter.
                  description: The error message.
        '401':
          description: The user are not authorized to perform operation.
          content:
            text/plain:
                schema:
                  type: string
                  example: Get your dirty hands off our application, hacker!
                  description: The error message.
        '404':
          description: The resource requested for update operation is not found by given mongo id value.
          content:
            text/plain:
                schema:
                  type: string
                  example: Requested resource does not exist...
                  description: The error message.
        '408':
          description: The request is not malformed but the internal server sent timeout.
          content:
            text/plain:
                schema:
                  type: string
                  example: The request timeouted...
                  description: The error message.
        '500':
          description: Internal server error, probably not a user's fault.
          content:
            text/plain:
                schema:
                  type: string
                  example: We are having crisis, it's not your fault...
                  description: The error message.
                  
######################
######################
##   USER API    ##
######################
######################

  /user/login:
    post:
      summary: Authenticates user to use all the defined operations in the swagger.
      operationId: loginUserOperation
      tags:
        - Login
      requestBody:
        required: true
        description: >
          The data body of the user for upsertion and authentication. Required login fields are those:
           - `email`
           - `password`
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Session token for authentication purposes.
          headers:
            Authentication: 
              schema:
                type: string
              description: Session token for the user's authentication towards operation usage.
        '400':
          description: The response is bad because request are malformed or openapi express validations fails.
          content:
            text/plain:
                schema:
                  type: string
                  example: Something is wrong, check your data before sending us a love letter.
                  description: The error message.
        '408':
          description: The request is not malformed but the internal server sent timeout.
          content:
            text/plain:
                schema:
                  type: string
                  example: The request timeouted...
                  description: The error message.
        '500':
          description: Internal server error, probably not a user's fault.
          content:
            text/plain:
                schema:
                  type: string
                  example: We are having crisis, it's not your fault...
                  description: The error message.
                  
  /user/register:
    post:
      summary: Registers user to use all the defined operations in the swagger.
      operationId: registerUserOperation
      tags:
        - Login
      requestBody:
        required: true
        description: >
          The data body of the user for upsertion and authentication. Required fields are those:
           - `name`
           - `email`
           - `password`
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Session token for authentication purposes.
          headers:
            Authentication: 
              schema:
                type: string
              description: Session token for the user's authentication towards operation usage.
        '400':
          description: The response is bad because request are malformed or openapi express validations fails.
          content:
            text/plain:
                schema:
                  type: string
                  example: Something is wrong, check your data before sending us a love letter.
                  description: The error message.
        '408':
          description: The request is not malformed but the internal server sent timeout.
          content:
            text/plain:
                schema:
                  type: string
                  example: The request timeouted...
                  description: The error message.
        '500':
          description: Internal server error, probably not a user's fault.
          content:
            text/plain:
                schema:
                  type: string
                  example: We are having crisis, it's not your fault...
                  description: The error message.
                  
  /user:
    get:
      security:
        - bearerAuth: []
      summary: Gather the information about single user's profile.
      operationId: getUserOperation
      tags:
        - User
      parameters:
        - in: query
          name: email
          required: true
          description: The unique email of the certain user.
          schema:
            type: string
      responses:
        '200':
          description: Successful response code thrown in case of user found and user is authorized to execute current operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    description: The internal mongo id value of the user's entity.
                  email:
                    type: string
                    description: The unique email of the single user.
                  password:
                    type: string
                    description: The encrypted password for user to log-in into application.
                  
          
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      
  schemas:
    Service:
      properties:
        _id:
          type: string
          description: The internal mongo id value of the service's entity.
        title:
          type: string
          description: Title of the service.
        type:
          type: string
          enum: [WATER, ENERGY, HEAT, PHONE, INTERNET, TV, MANUAL]
          description: The type of the service entity.
        userId:
          type: string
          description: The id of the user holding service.
        unit:
          type: string
          description: The unit of the service reading.
        costPerUnit:
          type: number
          description: Cost per unit.
    
    Notification:
      properties:
        _id:
          type: string
        serviceId:
          type: string
        triggerValue:
          type: number
        deviceId:
          type: string
        userId:
          type: string
        
    Reading:
      required: 
        - date
      properties:
        _id:
          type: string
          description: The internal mongo id value of the reading's entity.
        date:
          type: string
          format: date-time
          description: Date of the value.
        value:
          type: number
          description: Value of the reading.
        serviceId:
          type: string
      
    User:
      required: 
        - email
        - password
      properties:
        _id:
          type: string
          description: The internal mongo id value of the user's entity.
        email:
          type: string
          description: The identification code of the user.
        password:
          type: string
          description: The encrypted char sequence for user to login into application.
        name:
          type: string
          description: The user's full name.
        phone:
          type: string
          description: The phone number.